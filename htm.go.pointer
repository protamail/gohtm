package htm

import (
//    "fmt"
    "html"
    "strings"
)

func Tag(tag string, attr Safe, body Safe) Safe {
	nextPtr := &body;
	if len(attr.frag) > 0 {
		nextPtr = &attr
		closeBr := Safe{[]string{">"}, &body, nil}
		if attr.tail == nil {
			attr.next = &closeBr
		} else {
			attr.tail.next = &closeBr
		}
	}
	endTag := Safe{[]string{"</", tag, ">"}, nil, nil}
	if body.tail == nil {
		body.next = &endTag
	} else {
		body.tail.next = &endTag
	}
    return Safe{[]string{"<", tag}, nextPtr, &endTag}
}

func (c *Safe) Append(e *Safe) *Safe {
	if c.tail == nil {
		c.next = e
	} else {
		c.tail.next = e
	}
	c.tail = e
	return c
}

func Attr(a ...string) Safe {
    if len(a) > 0 {
        a1 := make([]string, 0, len(a)*2+1)
        for _, aa := range a {
            a1 = append(a1, " ", aa)
        }
        a1 = append(a1, "\n")
        return Safe{a1, nil, nil}
    }
    return Safe{a, nil, nil}
}

type Safe struct {
    frag []string
    next, tail *Safe
}

func (c *Safe) String() string {
    var b strings.Builder
    for cur := c; cur != nil; cur = cur.next {
        for _, f := range cur.frag {
            b.WriteString(f)
        }
    }
    return b.String()
}

func AsIs(a ...string) Safe {
    return Safe{a, nil, nil}
}

// Used to output HTML text, escaping HTML reserved characters <>&"
func Escape(a string) Safe {
    return Safe{[]string{html.EscapeString(a)}, nil, nil}
}

